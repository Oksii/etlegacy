name: ET Legacy Server Build

on:
  schedule:
    - cron: '0 */12 * * *' 
  workflow_dispatch:
    inputs:
      version_url:
        description: 'Custom ET Legacy version URL'
        required: false
        type: string
      set_stable:
        description: 'Set version as stable (tag)'
        required: false
        type: string
      force_rebuild:
        description: 'Force rebuild even if version exists'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  DOCKER_IMAGE: oksii/etlegacy

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Prepare image metadata
        id: meta
        run: |
          echo "image_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      # Only run these steps if we're NOT setting a stable tag
      - name: Checkout repository
        if: github.event.inputs.set_stable == ''
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract ET Legacy version info
        if: github.event.inputs.set_stable == ''
        id: version
        env:
          REGISTRY: docker.io
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/etlegacy
        run: |
          set -e  # Exit on any error
          
          # Function to extract version from URL
          get_version_from_url() {
            local url=$1
            # Pattern for versions with git commit info (e.g., v2.82.1-351-gfca1d03)
            if [[ $url =~ etlegacy-v([0-9]+\.[0-9]+\.[0-9]+-[0-9]+)-g[a-f0-9]+-(x86_64|aarch64)\.tar\.gz ]]; then
              echo "${BASH_REMATCH[1]}" # Returns just 2.82.1-351
            # Pattern for clean versions (e.g., v2.83.0)
            elif [[ $url =~ etlegacy-v([0-9]+\.[0-9]+\.[0-9]+)-(x86_64|aarch64)\.tar\.gz ]]; then
              echo "${BASH_REMATCH[1]}" # Returns just 2.83.0
            else
              return 1
            fi
          }
          
          # Function to compare version strings
          version_gt() {
            local v1=$1
            local v2=$2
            
            # Split version strings into components
            IFS='-' read -ra VER1 <<< "$v1"
            IFS='-' read -ra VER2 <<< "$v2"
            
            # Compare main version numbers first (2.83.1)
            if [ "$(printf '%s\n' "${VER1[0]}" "${VER2[0]}" | sort -V | head -n1)" != "${VER1[0]}" ]; then
              return 0
            elif [ "${VER1[0]}" != "${VER2[0]}" ]; then
              return 1
            fi
            
            # If main versions are equal, compare build numbers if they exist
            if [ ${#VER1[@]} -gt 1 ] && [ ${#VER2[@]} -gt 1 ]; then
              [ "${VER1[1]}" -gt "${VER2[1]}" ]
              return
            fi
            
            # If one has a build number and the other doesn't, the one without is newer
            if [ ${#VER1[@]} -eq 1 ] && [ ${#VER2[@]} -gt 1 ]; then
              return 0
            elif [ ${#VER1[@]} -gt 1 ] && [ ${#VER2[@]} -eq 1 ]; then
              return 1
            fi
            
            return 1
          }
          
          # Function to get latest version from Docker Hub
          get_latest_version() {
            local repo="${DOCKER_IMAGE#docker.io/}"
            local api_response
            local tags
            
            echo "Checking Docker Hub repository: $repo" >&2
            
            api_response=$(curl -s "https://hub.docker.com/v2/repositories/$repo/tags/")
            
            if [ -z "$api_response" ] || ! echo "$api_response" | jq -e '.results' >/dev/null 2>&1; then
                echo "No tags found in repository" >&2
                return 1
            fi
            
            tags=$(echo "$api_response" | \
                jq -r '.results[].name' | \
                grep -E '^v[0-9]+\.[0-9]+\.[0-9]+-[0-9]+' || true)
                
            if [ -z "$tags" ]; then
                echo "No matching version tags found" >&2
                return 1
            fi
            
            echo "$tags" | sort -V | tail -n1
          }

          
          # Get version information
          if [ -n "${{ github.event.inputs.version_url }}" ]; then
            echo "Using manually provided URL..."
            VERSION_URL="${{ github.event.inputs.version_url }}"
            VERSION=$(get_version_from_url "$VERSION_URL")
            
            if [ -z "$VERSION" ]; then
              echo "Error: Could not extract version from provided URL: $VERSION_URL"
              exit 1
            fi
          else
            echo "Fetching latest version from etlegacy.com..."
            DOWNLOAD_PAGE=$(curl -sSf --retry 3 https://www.etlegacy.com/workflow-files)
            VERSION_URL=$(echo "$DOWNLOAD_PAGE" | grep -o 'https://www\.etlegacy\.com/workflow-files/dl/[^"]*x86_64\.tar\.gz' | head -1)
            
            if [ -z "$VERSION_URL" ]; then
              echo "Error: Could not find x86_64 download URL"
              exit 1
            fi
            
            VERSION=$(get_version_from_url "$VERSION_URL")
            if [ -z "$VERSION" ]; then
              echo "Error: Could not extract version from URL: $VERSION_URL"
              exit 1
            fi
          fi
          
          echo "Detected version: v$VERSION"
          echo "Using URL: $VERSION_URL"
                    
          # Check if this version already exists in Docker Hub
          if [ "${{ github.event.inputs.force_rebuild }}" = "true" ]; then
            echo "Force rebuild requested. Will build regardless of existing version."
            echo "needs_build=true" >> $GITHUB_OUTPUT
          else
            if docker pull ${DOCKER_IMAGE}:v$VERSION >/dev/null 2>&1; then
              echo "Version v$VERSION already exists in registry. Skipping build."
              echo "needs_build=false" >> $GITHUB_OUTPUT
            else
              echo "Version v$VERSION does not exist in registry. Will build."
              echo "needs_build=true" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Determine if this should be tagged as latest
          SET_LATEST="true"
          LATEST_VERSION=$(get_latest_version) || true
          
          if [ -n "${{ github.event.inputs.version_url }}" ]; then
            if [ -n "$LATEST_VERSION" ]; then
              if ! version_gt "$VERSION" "${LATEST_VERSION#v}"; then
                SET_LATEST="false"
                echo "Manual version ($VERSION) is not newer than current latest ($LATEST_VERSION), won't tag as latest"
              else
                echo "Manual version ($VERSION) is newer than current latest ($LATEST_VERSION), will tag as latest"
              fi
            else
              echo "No existing versions found in registry, this will be tagged as latest"
              SET_LATEST="true"
            fi
          fi

          # Check if an ARM snapshot exists and include in our build
          echo "Checking for ARM version..."

          # Try both possible ARM URL patterns
          # Pattern 1: Simple x86_64 to aarch64 replacement
          ARM_URL="${VERSION_URL/x86_64.tar.gz/aarch64.tar.gz}"
          
          # Pattern 2: Replace lnxx8664 directory with lnxarm64
          ARM_URL_ALT="${VERSION_URL/lnxx8664/lnxarm64}"
          ARM_URL_ALT="${ARM_URL_ALT/x86_64.tar.gz/aarch64.tar.gz}"
          
          echo "Checking primary ARM path: $ARM_URL"
          if curl --output /dev/null --silent --head --fail "$ARM_URL"; then
            echo "ARM version found at: $ARM_URL"
            echo "arm_available=true" >> $GITHUB_OUTPUT
            echo "arm_url=$ARM_URL" >> $GITHUB_OUTPUT
          else
            echo "Checking alternative ARM path: $ARM_URL_ALT"
            if curl --output /dev/null --silent --head --fail "$ARM_URL_ALT"; then
              echo "ARM version found at: $ARM_URL_ALT"
              echo "arm_available=true" >> $GITHUB_OUTPUT
              echo "arm_url=$ARM_URL_ALT" >> $GITHUB_OUTPUT
            else
              echo "No ARM version available at either location"
              echo "arm_available=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Keep your existing output statements
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "version_url=$VERSION_URL" >> $GITHUB_OUTPUT
          echo "set_latest=$SET_LATEST" >> $GITHUB_OUTPUT

      - name: Notify Build Start
        if: github.event.inputs.set_stable == '' && steps.version.outputs.needs_build == 'true' && steps.version.outputs.set_latest == 'true'
        run: |
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"Automatic ET:Legacy Update\",
                \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                \"description\": \"Automatically Scheduled Update Run\n\n\",
                \"color\": 45220,
                \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                \"fields\": [{
                  \"name\": \"**Docker Image**\",
                  \"value\": \"Track progress at: **[GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})**\",
                  \"inline\": false
                }],
                \"author\": {
                  \"name\": \"ET:Legacy Update\",
                  \"icon_url\": \"https://images-ext-1.discordapp.net/external/vV4O-GUzjGLpAdb5vNhBpkPDpZMFgunnSEz9WfQvxNA/https/cdn.discordapp.com/emojis/692813160398323863.webp\"
                },
                \"thumbnail\": {
                  \"url\": \"https://pudibot.s3.us-east-005.backblazeb2.com/flag_etl.png\"
                }
              }]
            }"

      - name: Build and push Docker image
        if: github.event.inputs.set_stable == '' && steps.version.outputs.needs_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ steps.version.outputs.arm_available == 'true' && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          tags: ${{ steps.version.outputs.set_latest == 'true' && format('{0}:latest,{0}:{1}', env.DOCKER_IMAGE, steps.version.outputs.version) || format('{0}:{1}', env.DOCKER_IMAGE, steps.version.outputs.version) }}
          build-args: |
            STATIC_URL_AMD64=${{ steps.version.outputs.version_url }}
            STATIC_URL_ARM64=${{ steps.version.outputs.arm_url }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract and Upload PK3
        if: github.event.inputs.set_stable == '' && steps.version.outputs.needs_build == 'true'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: ${{ secrets.R2_BUCKET_NAME }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          AWS_DEFAULT_REGION: auto
          AWS_PYTHON_CONNECTOR_DISABLE_SSL_VERIFICATION: 'True'
          PYTHONWARNINGS: "ignore::urllib3.exceptions.InsecureRequestWarning"
          REQUESTS_CA_BUNDLE: ""
          AWS_CA_BUNDLE: ""
          BOTO_VERIFY_SSL: "FALSE"
        run: |
          # Disable SSL warnings in Python
          python3 -c "
          import urllib3
          import warnings
          urllib3.disable_warnings()
          warnings.filterwarnings('ignore', category=urllib3.exceptions.InsecureRequestWarning)
          "
          
          set -e  # Exit on any error
          
          TEMP_DIR=$(mktemp -d)
          cd $TEMP_DIR
          
          # Download and process x86_64 version
          echo "Downloading x86_64 ET Legacy snapshot..."
          curl -sSL -O "${{ steps.version.outputs.version_url }}"
          
          X86_TAR_GZ_FILE=$(basename "${{ steps.version.outputs.version_url }}")
          tar xzf "$X86_TAR_GZ_FILE"
          
          # Extract and upload PK3 from x86_64
          PK3_PATH=$(find . -name "legacy_*.pk3")
          if [ -z "$PK3_PATH" ]; then
            echo "Error: Could not find pk3 file"
            exit 1
          fi
          
          echo "Uploading PK3 to R2..."
          aws s3 cp "$PK3_PATH" "s3://$R2_BUCKET/maps/et/legacy/$(basename $PK3_PATH)" \
            --endpoint-url "$R2_ENDPOINT" \
            --no-verify-ssl \
            --only-show-errors 2>/dev/null
          
          echo "Uploading x86_64 snapshot to R2..."
          aws s3 cp "$X86_TAR_GZ_FILE" "s3://$R2_BUCKET/docker/etl/snapshots/$X86_TAR_GZ_FILE" \
            --endpoint-url "$R2_ENDPOINT" \
            --no-verify-ssl \
            --only-show-errors 2>/dev/null

          # If ARM version is available, download and upload it too
          if [ "${{ steps.version.outputs.arm_available }}" = "true" ]; then
            echo "Downloading ARM ET Legacy snapshot..."
            curl -sSL -O "${{ steps.version.outputs.arm_url }}"
            
            ARM_TAR_GZ_FILE=$(basename "${{ steps.version.outputs.arm_url }}")
            
            echo "Uploading ARM snapshot to R2..."
            aws s3 cp "$ARM_TAR_GZ_FILE" "s3://$R2_BUCKET/docker/etl/snapshots/$ARM_TAR_GZ_FILE" \
              --endpoint-url "$R2_ENDPOINT" \
              --no-verify-ssl \
              --only-show-errors 2>/dev/null
          fi
          
          cd - > /dev/null
          rm -rf $TEMP_DIR
  
      - name: Set stable tag
        if: github.event.inputs.set_stable != ''
        run: |
          echo "Setting version ${{ github.event.inputs.set_stable }} as stable..."
          
          docker pull ${DOCKER_IMAGE}:${{ github.event.inputs.set_stable }}
          docker tag ${DOCKER_IMAGE}:${{ github.event.inputs.set_stable }} ${DOCKER_IMAGE}:stable
          docker push ${DOCKER_IMAGE}:stable
          
          echo "Successfully set ${{ github.event.inputs.set_stable }} as stable"

      - name: Trigger Watchtower Update
        if: github.event.inputs.set_stable != ''
        run: |
          SERVER_URL_LIST="${{ secrets.SERVER_URL_LIST }}"
          IFS=',' read -ra SERVER_URLS <<< "$SERVER_URL_LIST"
          
          for server in "${SERVER_URLS[@]}"; do
            (curl -X POST -H "Authorization: Bearer ${{ secrets.WATCHTOWER_API_TOKEN }}" http://$server:8080/v1/update --max-time 5 || true) &
          done
          wait