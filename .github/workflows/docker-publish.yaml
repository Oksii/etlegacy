name: Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - type: latest
            dockerfile: Dockerfile.latest
            url_arg: STATIC_URL_LATEST
            tag: latest
          - type: stable
            dockerfile: Dockerfile.stable
            url_arg: STATIC_URL_STABLE
            tag: stable

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: oksii/etlegacy
          tags: |
            type=raw,value=${{ matrix.tag }}
            type=sha,prefix=${{ matrix.tag }}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          build-args: |
            ${{ matrix.url_arg }}=${{ secrets[matrix.url_arg] }}
            STATIC_URL_BASEGAME=${{ secrets.STATIC_URL_BASEGAME }}

  notify-watchtower:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Check Domain Availability
        id: check-domains
        run: |
          reachable=()
          for domain in ${{ secrets.SERVER_URL_LIST }}; do
            if timeout 5 bash -c "nc -z -w 1 $domain 8080" 2>/dev/null; then
              reachable+=("$domain")
            fi
          done
          if [ ${#reachable[@]} -gt 0 ]; then
            echo "domains=${reachable[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Notify Watchtower
        if: steps.check-domains.outputs.domains
        run: |
          for domain in ${{ steps.check-domains.outputs.domains }}; do
            curl -m 10 -X POST \
              -H "Authorization: Bearer ${{ secrets.WATCHTOWER_API_TOKEN }}" \
              "http://$domain:8080/v1/update" || true
          done

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: true